#!/usr/bin/env node
const DEBUG=!0,LF="\r\n",text={tooLimitedScope:"Sorry, too limited scope.",noResult:"Sorry, no result",addOptionIndex:"Add option '-i <n>' to list a specific feature using the same search.",mdncomp:"npm i -g mdncomp",gitName:"GitLab",gitUrl:"https://gitlab.com/epistemex/mdncomp/"},errText={indexOutOfRange:"Index out of range",versionWarning:"WARNING: mdncomp is built for Node version 8 or newer. It may not work in older Node.js versions.",missingModule:String.raw`Critical: A core module seem to be missing. Use '${text.mdncomp}' to reinstall.`,unhandled:String.raw`An unhandled error occurred!${LF}Please consider reporting to help us solve it via ${text.gitName}:${LF}
  ${text.gitUrl}issues\nTry reinstalling '${text.mdncomp}' (or --fupdate) if the issue persists.`};+process.versions.node.split(".")[0]<8&&console.log(errText.versionWarning);const _errHandler=e=>{console.log(errText.unhandled,e),process.exit(1)};process.on("error",_errHandler),process.on("uncaughtException",_errHandler);const _base=`../${DEBUG?"src":"build"}/`,utils=loadModule("core.utils");Object.assign(global,{DEBUG:DEBUG,_base:_base,text:text,errText:errText,loadModule:loadModule,lang:"en-US",lf:LF,sepChar:"|",shortPad:1,ANSI:loadModule("core.ansi"),options:{}});const options=global.options=loadModule("init.options");if(options.colors&&!options.markdown&&".txt"!==utils.getExt(options.out).toLowerCase()||Object.keys(global.ANSI).filter(e=>!e.includes("ursor")).forEach(e=>ANSI[e]=""),options.update)loadModule("core.update")(!1,!1);else if(options.cupdate)loadModule("core.update")(!1,!0);else if(options.fupdate)loadModule("core.update")(!0,!1);else if(options.configpath)console.log(require("path").resolve(loadModule("core.io").getConfigDataPath()));else if(options.browser)loadModule("option.browser")(options.browser);else if(options.list)loadModule("option.list")(options.list);else if(options.args.length){const e=loadModule("option.search")(options.args[0]);if(e.length)if(e.length>1&&options.index<0){let o=(""+e.length).length,t="";e.forEach((e,s)=>{t+=`${ANSI.yellow}[${ANSI.green}${(""+s).padStart(o)}${ANSI.yellow}] ${ANSI.white}${e}\n`}),t+=`${ANSI.reset}\n`+utils.breakAnsiLine(text.addOptionIndex,options.maxLength),console.log(t)}else e.length>1&&options.index>=e.length?console.log(`${ANSI.red}${errText.indexOutOfRange}.${ANSI.reset}`):showResults(1===e.length?e[0]:e[options.index]);else console.log(`${ANSI.reset}${text.noResult}.`)}else if(options.random){let e=utils.buildTable(utils.loadMDN());if("string"==typeof options.random){let o=options.random;e=e.filter(e=>e.includes(o))}if(e.length){showResults(e[Math.random()*e.length|0])}else console.log(text.tooLimitedScope)}else options.help();function showResults(e){const o=loadModule("formatter.common")(e);console.log(require("util").inspect(o,{depth:8}))}function loadModule(e){let o;try{o=require(_base+e)}catch(o){console.log(errText.missingModule),console.log(e),DEBUG&&console.log("ERROR OBJECT:",o),process.exit(1)}return o}