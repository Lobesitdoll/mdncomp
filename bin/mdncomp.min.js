#!/usr/bin/env node
/*! mdncomp (c) epistemex */
const DEBUG=!1,lf="\r\n",text={basicSupport:"Basic Support",desktop:"Desktop",mobile:"Mobile",ext:"Extended",hdrNotes:"NOTES",hdrLinks:"LINKS",hdrFlags:"FLAGS",hdrFlagsHistory:"FLAGS & HISTORY",hdrHistory:"HISTORY",hdrSpecs:"SPECS",hdrWorkers:"WORKER SUPPORT",hdrSAB:"SHAREDARRAYBUFFER AS PARAMETER SUPPORT",hdrBrowsers:"Browsers:",workerSupport:"In Worker:",sabSupport:"SAB as param:",sabInDataView:"SAB in DataView:",standard:"On Standard Track",experimental:"Experimental",deprecated:"Deprecated",nonStandard:"Non-Standard",standardShort:"STD",experimentalShort:"EXP",deprecatedShort:"DEPR",nonStandardShort:"NOSTD",altName:"Alternative name",usesAltName:" uses alternative name: ",versionColumn:"Version ",partialImpl:"Partial implementation.",vendorPrefix:"Vendor prefix",tooLimitedScope:"Sorry, too limited scope.",noResult:"Sorry, no result",workerHint:"?RUse option ?c-w, --worker?R to see Worker support details.",sabHint:"?RUse option ?c--sab?R to see SharedArrayBuffer as a parameter details.",historyHint:"?RUse option ?c-y, --history?R to see historical data.",specsHint:"?RUse option ?c--specs?R to see specifications.",descHint:"?RUse option ?c--desc?R to get a short description of the feature.",filterHint:"Add additional search terms to filter result list.",someNotesHint:"Some entries has notes",someFlagsHint:"Some entries has flags",someHints:"Use full format to see details",refLink:"Ref link",seeNote:"See note",thisFeatBehind:"This feature is behind the",preference:"preference",setTo:"set to",compileWith:"Compile with",startWith:"Start with",specRec:"Recommendation",specCandidate:"Candidate",specStandard:"Standard",specDraft:"Draft",specRelease:"Release",specWorking:"Working",specEditors:"Editor's",specLiving:"Living",obsolete:"Obsolete",status:"status",unknownBrowser:"Unknown browser",noArgListsId:"No argument lists all valid IDs",listFeature:"Feature",listParent:"Parent branch",listBranch:"Branch (not a feature, no direct sub-features)",hasMergedAnother:"This has been merged in another",lastCallWorking:"Last Call Working",specProposed:"Proposed",valid:"Valid",browserIds:"browser identifiers:",statuses:"statuses",pathRoots:"path roots",addOptionIndex:"Add option '-i <n>' to list a specific feature using the same search.",indexOutOfRange:"Index out of range",invalidRegex:"Invalid regular expression.",invalidColumnIds:"Invalid browser id in custom columns.",notFeatureObject:'Not a feature object or parent to feature(s). Also see the "--list" option.',versionWarning:"WARNING: mdncomp is built for Node version 8 or newer. It may not work in older Node.js versions.",criticalDataFile:"Critical error: data file not found.\n?yTry running with option --fupdate to download latest snapshot.",missingModule:"Critical: A core module seem to be missing. Use 'npm i -g mdncomp' to reinstall.",unhandled:" *** An unhandled error occurred!\n  Please consider reporting to help us solve it via GitLab:\n  https://gitlab.com/epistemex/mdncomp/issues\n  \n  Try update/reinstall 'npm i -g mdncomp' (or --fupdate) if the issue persists.\n  "};+process.versions.node.split(".")[0]<8&&console.log(text.versionWarning);const _errHandler=e=>{console.log(text.unhandled,e),process.exitCode=1};process.on("error",_errHandler),process.on("uncaughtException",_errHandler);const _base=`../${DEBUG?"src":"build"}/`,utils=loadModule("core.utils");Object.assign(global,{lf:lf,DEBUG:DEBUG,_base:_base,text:text,loadModule:loadModule,shortPad:1,char:{sep:"|",progressBar:"#",yes:"Y",no:"-",unknown:"?",feature:"F",parent:"P",branch:"B",flags:"F",notes:"*"},lang:"en-US",ANSI:loadModule("core.ansi"),log:utils.log,err:utils.err,options:{}});const options=global.options=loadModule("init.options");if(options.colors||Object.keys(global.ANSI).filter(e=>!e.includes("ursor")).forEach(e=>ANSI[e]=""),options.update)loadModule("core.update")(!1,!1);else if(options.cupdate)loadModule("core.update")(!1,!0);else if(options.fupdate)loadModule("core.update")(!0,!1);else if(options.configpath)console.log(require("path").resolve(loadModule("core.io").getConfigDataPath()));else if(options.browser)loadModule("option.browser")(options.browser);else if(options.list)loadModule("option.list")(options.list);else if(options.args.length)search();else if(options.random){const e=loadModule("option.random")(options.random);e.length?showResults(e):err("Sorry, the keyword doesn't produce a scope. Try add --fuzzy.")}else options.help();function search(){const e=options.args.shift(),o=loadModule("option.search")(e);if(o.length)if(o.length>1&&options.index<0){let e=Math.log10(o.length)+1,t="";o.forEach((o,s)=>{t+=`?y[?g${(""+s).padStart(e)}?y] ?w${o}\n`}),t+="?R\n"+utils.breakAnsiLine(text.addOptionIndex,options.maxLength),log(t)}else o.length>1&&options.index>=o.length?err(`?y${text.indexOutOfRange}.?R`):showResults(1===o.length?o[0]:o[options.index]);else options.fuzzy||e.includes("*")||e.startsWith("/")?log(`?R${text.noResult}.`):(options.fuzzy=!0,options.args.unshift(e),search())}function showResults(e){const o=loadModule("formatter.common")(e);o&&(loadModule(options.shorthand?"formatter.short":"formatter.long")(o),log("?pData from MDN - `npm i -g mdncomp` by epistemex?w?R"))}function loadModule(e){let o;try{o=require(_base+e)}catch(o){console.error(text.missingModule),console.error(e),DEBUG&&console.error("ERROR OBJECT:",o),process.exit()}return o}